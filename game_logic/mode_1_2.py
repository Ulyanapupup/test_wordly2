# mode_1_2.py
import math
import random

question_pool = [
    {"text": "–ß–∏—Å–ª–æ —á—ë—Ç–Ω–æ–µ", "fn": "is_even"},
    {"text": "–ß–∏—Å–ª–æ –ø—Ä–æ—Å—Ç–æ–µ", "fn": "is_prime"},
    {"text": "–ß–∏—Å–ª–æ –¥–µ–ª–∏—Ç—Å—è –Ω–∞ 3", "fn": "is_div_3"},
    {"text": "–ß–∏—Å–ª–æ –¥–µ–ª–∏—Ç—Å—è –Ω–∞ 5", "fn": "is_div_5"},
    {"text": "–ß–∏—Å–ª–æ –¥–µ–ª–∏—Ç—Å—è –Ω–∞ 7", "fn": "is_div_7"},
    {"text": "–ß–∏—Å–ª–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ", "fn": "is_positive", "condition": lambda n: n < 0},
    {"text": "–ß–∏—Å–ª–æ —è–≤–ª—è–µ—Ç—Å—è –∫–≤–∞–¥—Ä–∞—Ç–æ–º", "fn": "is_square", "condition": lambda n: n >= 0},
    {"text": "–ß–∏—Å–ª–æ —è–≤–ª—è–µ—Ç—Å—è –∫—É–±–æ–º", "fn": "is_cube", "condition": lambda n: n >= 0},
    {"text": "–ú–æ–¥—É–ª—å —á–∏—Å–ª–∞ —è–≤–ª—è–µ—Ç—Å—è –∫–≤–∞–¥—Ä–∞—Ç–æ–º", "fn": "abs_is_square", "condition": lambda n: n < 0},
    {"text": "–ú–æ–¥—É–ª—å —á–∏—Å–ª–∞ —è–≤–ª—è–µ—Ç—Å—è –∫—É–±–æ–º", "fn": "abs_is_cube", "condition": lambda n: n < 0},
    {"text": "–ß–∏—Å–ª–æ –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ–µ", "fn": "is_single_digit", "group": "digitSize"},
    {"text": "–ß–∏—Å–ª–æ –¥–≤—É–∑–Ω–∞—á–Ω–æ–µ", "fn": "is_two_digit", "group": "digitSize"},
    {"text": "–ß–∏—Å–ª–æ —Ç—Ä–µ—Ö–∑–Ω–∞—á–Ω–æ–µ", "fn": "is_three_digit", "group": "digitSize"},
    {"text": "–°—É–º–º–∞ —Ü–∏—Ñ—Ä —á–∏—Å–ª–∞ ‚Äî —á—ë—Ç–Ω–∞—è", "fn": "sum_digits_even"}
]

unique_functions = {
    "is_even": lambda n: n % 2 == 0,
    "is_prime": lambda n: n >= 2 and all(n % d != 0 for d in range(2, int(n ** 0.5) + 1)),
    "is_div_3": lambda n: n % 3 == 0,
    "is_div_5": lambda n: n % 5 == 0,
    "is_div_7": lambda n: n % 7 == 0,
    "is_square": lambda n: n >= 0 and math.isqrt(n) ** 2 == n,
    "is_cube": lambda n: round(abs(n) ** (1 / 3)) ** 3 == abs(n),
    "abs_is_square": lambda n: math.isqrt(abs(n)) ** 2 == abs(n),
    "abs_is_cube": lambda n: round(abs(n) ** (1 / 3)) ** 3 == abs(n),
    "is_positive": lambda n: n > 0,
    "is_single_digit": lambda n: abs(n) < 10,
    "is_two_digit": lambda n: 10 <= abs(n) < 100,
    "is_three_digit": lambda n: 100 <= abs(n) < 1000,
    "sum_digits_even": lambda n: sum(int(d) for d in str(abs(n))) % 2 == 0
}

class Game:
    def __init__(self, secret, min_range, max_range):
        self.finished = False
        self.final_guess = None  # –ü–æ—Å–ª–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ, –µ—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ—Ä–µ–Ω–∞
        self.awaiting_final_confirmation = False
        self.secret = secret
        self.min_range = min_range
        self.max_range = max_range
        self.min = min_range
        self.max = max_range
        self.possible_numbers = list(range(min_range, max_range + 1))
        self.asked_questions = set()
        self.asked_range_questions = []
        self.asked_digit_group = False
        self.range_guessing_mode = False
        self.current_question = None
        self.remaining_questions = self._init_questions(secret)

    def _init_questions(self, secret):
        q_filtered = [q for q in question_pool if 'condition' not in q or q['condition'](secret)]
        random.shuffle(q_filtered)
        return q_filtered

    def next_question(self):
        if not self.range_guessing_mode:
            while self.remaining_questions:
                q = self.remaining_questions.pop(0)
                if q.get("group") == "digitSize" and self.asked_digit_group:
                    continue
                self.current_question = q
                return q["text"]

            self.range_guessing_mode = True

        # –±–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫
        if len(self.possible_numbers) <= 1:
            guess = self.possible_numbers[0] if self.possible_numbers else '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
            self.final_guess = guess
            self.awaiting_final_confirmation = True
            return f"–Ø –∑–Ω–∞—é! –≠—Ç–æ —á–∏—Å–ª–æ {guess}?"


        mid = (self.min + self.max) // 2
        while mid in self.asked_range_questions:
            if mid == self.min:
                mid = self.max
            elif mid == self.max:
                mid = self.min
            else:
                return "–í—ã –º–µ–Ω—è –∑–∞–ø—É—Ç–∞–ª–∏ üôÉ"

        self.asked_range_questions.append(mid)
        self.current_question = {"type": "range", "value": mid, "text": f"–ß–∏—Å–ª–æ –±–æ–ª—å—à–µ {mid}"}
        return self.current_question["text"]

    def process_answer(self, answer):
        yes = answer.lower().strip() == "–¥–∞"
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        if self.awaiting_final_confirmation:
            self.finished = True
            self.awaiting_final_confirmation = False
            if yes:
                return "–£—Ä–∞! –Ø —É–≥–∞–¥–∞–ª–∞!"
            else:
                return "–û –Ω–µ—Ç, —è –æ—à–∏–±–ª–∞—Å—å"
  
        if not self.current_question:
            return "–ù–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞."

        if self.current_question.get("type") == "range":
            mid = self.current_question["value"]
            if yes:
                self.min = max(self.min, mid + 1)
            else:
                self.max = min(self.max, mid)
            self.possible_numbers = [n for n in self.possible_numbers if self.min <= n <= self.max]

        else:
            fn = self.current_question.get("fn")
            if yes and self.current_question.get("group") == "digitSize":
                self.asked_digit_group = True
                self.remaining_questions = [q for q in self.remaining_questions if q.get("group") != "digitSize"]

            if fn in unique_functions:
                self.possible_numbers = [n for n in self.possible_numbers if unique_functions[fn](n) == yes]

            if self.possible_numbers:
                self.min = min(self.possible_numbers)
                self.max = max(self.possible_numbers)

        if len(self.possible_numbers) == 0:
            return "–í—ã –º–µ–Ω—è –∑–∞–ø—É—Ç–∞–ª–∏ üôÉ"
        elif len(self.possible_numbers) == 1:
            self.awaiting_final_confirmation = True
            return f"–Ø –∑–Ω–∞—é! –≠—Ç–æ —á–∏—Å–ª–æ {self.possible_numbers[0]}"
        else:
            return self.next_question()
